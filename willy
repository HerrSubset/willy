#!/usr/bin/env python

import argparse
import csv
import random



################################################################################
## Helper Functions
################################################################################

# print a line with information for the user
def print_info(message):
    print("[INFO] " + message)



# print an error line to the user
def die(message):
    print("[ERROR] " + message)
    exit()



#gets the path for the output file
def get_output_path(args, default_path = "willyWroteThis.csv"):
    path = default_path
    if args.output_file:
        path = args.output_file

    return path



# reads the input file and writes all lines into an array
def get_lines_array(args):
    print_info("First let me get all this stuff in my head.")
    with open(args.file, "r") as read_file:
        lines = read_file.readlines()

    return lines



# sorts an array of strings on a certain index
def get_user_hash(lines, index):
    print_info("Ok, gimme a sec while I figure this out.")
    # group all lines of a member by putting them in a dictionary
    dict = {}
    for line in lines:
        line_array = line.split(",")
        dict.setdefault(line_array[index], []).append(line)

    return dict



# prompts the user for a certain percentage. Returns a number between 0 and 1.
def get_percentage_from_user():
    #get the percentage of user records that should be kept
    number = input("Aight, what percentage of users do you want to keep? [0-100] ")
    number = float(number)
    while not(type(number) == float and number <= 100 and number >= 0):
        number = input("Don't be a smartass! Gimme a number between 0 and 100! ")
        number = float(number)

    return number / 100



# check what arguments the user gave to Willy
def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("command", help="Tell Willy what to do.")
    parser.add_argument("file",
                        help="Tell Willy what file to do something with.")
    parser.add_argument("-o", "--output-file",
                        help="Tell Willy what file to write to.")
    parser.add_argument("-d", "--delimiter", default=",")

    args = parser.parse_args()

    return args




################################################################################
## Command Functions
################################################################################

# the dropCrap command. It throws away all data fields except for "IKL",
# "TRACE_ID", and "TYPE_OMSCHRIJVING"
def drop_crap(args):
    #load data file
    print_info("I'm loading your file. Be patient, it's 19 million records and I don't know how to multithread.")

    #create a new file to write to
    path = get_output_path(args)

    #process data and print to new file
    with open(args.file, "r") as read_file:
        with open(path, "w") as write_file:
            reader = csv.reader(read_file, delimiter=args.delimiter)
            for row in reader:
                write_file.write(row[0] + "," + row[2] + "," + row[3] + ","
                                + row[4] + "\n")

    print_info("Yo dude, I put all that good stuff you asked for in " + path)



# the filter command. It asks how much % of all users in the database should be
# retained. It then selects users until that percentage is reached and writes
# their data to a new file.
def filter(args):
    #create a list with all user IDs
    print_info("Just lemme get all the peeps that are in here real quick.")
    users = []
    with open(args.file, "r") as read_file:
        reader = csv.reader(read_file, delimiter=args.delimiter)
        header = reader.__next__()
        #an error is raised here if incorrect delimiter was user_index
        try:
            uid_index = header.index("IKL")
        except:
            die("Couldn't find 'IKL' in the header. Sure you used the correct delimiter?")

        #process data lines
        previous_uid = ""
        for row in reader:
            uid = row[uid_index]

            if uid != previous_uid:
                users.append(uid)

            #save current uid for next row
            previous_uid = uid


    #let user decide what percentage of users to keep
    percentage = get_percentage_from_user()

    #select random users to print to new file
    selected_users = []
    while (len(selected_users) / len(users)) < percentage:
        #generate random user to be selected
        user_index = random.randint(0, len(users) - 1)
        selected_users.append(users.pop(user_index))

    print_info("Yo man, I selected " + str(len(selected_users)) +
                " dudes and dudettes for you, hope you're happy with them.")

    users = []  #free up some memory

    #go over the file again to extract all data from selected users
    user_data = []
    with open(args.file, "r") as read_file:
        reader = csv.reader(read_file, delimiter=args.delimiter)
        header = reader.__next__()
        uid_index = header.index("IKL")
        for row in reader:
            try:
                #check if user of current row was selected
                selected_users.index(row[uid_index])
                #if no error was thrown, keep current row
                user_data.append(row)
            except:
                pass


    #write all selected users to the output file
    path = get_output_path(args, "filteredByWilly.csv")

    with open(path, "w") as write_file:
        #write the header line to the file
        write_file.write(",".join(header) + "\n")

        #write all the data to the file
        for row in user_data:
            write_file.write(",".join(row) + "\n")




################################################################################
## Program Start
################################################################################

if __name__ == "__main__":
    args = parse_arguments()


    # start the dropCrap command
    if args.command == "dropCrap":
        drop_crap(args)

    # start the filter command
    elif args.command == "filter":
        filter(args)


    # execute this is the command was unknown
    else:
        die("Yo man, what is this '" + args.command +
                "' thing you're talking about? I don't know how to do that.")
